


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000         
   15 00000000                 EXPORT           StartOS
   16 00000000                 EXPORT           ContextSwitch
   17 00000000                 EXPORT           PendSV_Handler
   18 00000000                 EXPORT           SVC_Handler
   19 00000000                 EXPORT           StartOS
   20 00000000                 EXPORT           Debug
   21 00000000                 EXPORT           Debug2
   22 00000000                 EXPORT           set_R9
   23 00000000                 IMPORT           Runptr
   24 00000000                 IMPORT           STACK
   25 00000000                 IMPORT           threads
   26 00000000                 IMPORT           Scheduler
   27 00000000                 IMPORT           EnableInterrupts
   28 00000000                 IMPORT           DisableInterrupts
   29 00000000                 IMPORT           OS_Id
   30 00000000                 IMPORT           OS_Kill
   31 00000000                 IMPORT           OS_Time
   32 00000000                 IMPORT           OS_AddThread
   33 00000000                 IMPORT           OS_Sleep
   34 00000000         
   35 00000000         
   36 00000000         
   37 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   38 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   39 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   40 00000000 000000EF 
                       NVIC_LEVEL14



ARM Macro Assembler    Page 2 


                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   41 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   42 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   43 00000000 E000ED24 
                       NVIC_SYS_HND_CTRL_R
                               EQU              0xE000ED24
   44 00000000         
   45 00000000         StartOS
   46 00000000         ; put your code here
   47 00000000         
   48 00000000         
   49 00000000 4770            BX               LR          ; start first threa
                                                            d
   50 00000002         
   51 00000002         OSStartHang
   52 00000002 E7FE            B                OSStartHang ; Should never get 
                                                            here
   53 00000004         
   54 00000004         
   55 00000004         ;*******************************************************
                       *************************************************
   56 00000004         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   57 00000004         ;                                           void Context
                       Switch(void)
   58 00000004         ;
   59 00000004         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   60 00000004         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   61 00000004         ;*******************************************************
                       *************************************************
   62 00000004         
   63 00000004         ContextSwitch
   64 00000004         ; edit this code
   65 00000004 4833            LDR              R0, = NVIC_INT_CTRL
   66 00000006         ;LDR R1, = NVIC_SYSPRI14
   67 00000006         ;LDR R2, = NVIC_LEVEL15
   68 00000006         ;LSL R2, #7
   69 00000006         ;LDR R12, [R1]
   70 00000006         ;ORR R12, R12, R2
   71 00000006         ;STR R12, [R1]
   72 00000006 6801            LDR              R1, [R0]
   73 00000008 F04F 5280       LDR              R2, = NVIC_PENDSVSET
   74 0000000C EA41 0102       ORR              R1, R1, R2
   75 00000010 6001            STR              R1, [R0]
   76 00000012 B501            PUSH{R0,         LR}
   77 00000014 F7FF FFFE       BL               EnableInterrupts ; 2) Prevent i
                                                            nterrupt during swi
                                                            tch
   78 00000018 E8BD 4001       POP{R0,          LR}



ARM Macro Assembler    Page 3 


   79 0000001C         
   80 0000001C 4770            BX               LR
   81 0000001E         
   82 0000001E         
   83 0000001E         
   84 0000001E         ;*******************************************************
                       *************************************************
   85 0000001E         ;                                         HANDLE PendSV 
                       EXCEPTION
   86 0000001E         ;                                     void OS_CPU_PendSV
                       Handler(void)
   87 0000001E         ;
   88 0000001E         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   89 0000001E         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   90 0000001E         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   91 0000001E         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   92 0000001E         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   93 0000001E         ;              a thread or occurs due to an interrupt or
                        exception.
   94 0000001E         ;
   95 0000001E         ;           2) Pseudo-code is:
   96 0000001E         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   97 0000001E         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   98 0000001E         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   99 0000001E         ;              d) Call OSTaskSwHook();
  100 0000001E         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  101 0000001E         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  102 0000001E         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  103 0000001E         ;              h) Restore R4-R11 from new process stack;
                       
  104 0000001E         ;              i) Perform exception return which will re
                       store remaining context.
  105 0000001E         ;
  106 0000001E         ;           3) On entry into PendSV handler:
  107 0000001E         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  108 0000001E         ;                 xPSR, PC, LR, R12, R0-R3
  109 0000001E         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  110 0000001E         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  111 0000001E         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  112 0000001E         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  113 0000001E         ;
  114 0000001E         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we



ARM Macro Assembler    Page 4 


  115 0000001E         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  116 0000001E         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  117 0000001E         ;*******************************************************
                       *************************************************
  118 0000001E         
  119 0000001E         PendSV_Handler
  120 0000001E         ; put your code here
  121 0000001E B672            CPSID            I
  122 00000020 B501            PUSH{R0,         LR}
  123 00000022 F7FF FFFE       BL               DisableInterrupts ; 2) Prevent 
                                                            interrupt during sw
                                                            itch
  124 00000026 E8BD 4001       POP{R0,          LR}
  125 0000002A 482A            LDR              R0, =0xE000ED04
  126 0000002C 6801            LDR              R1, [R0]
  127 0000002E F041 6100       ORR              R1, R1, #0x08000000
  128 00000032 6001            STR              R1, [R0]
  129 00000034         ;LDR R2, = PF2
  130 00000034         ;LDR R2, [R2]
  131 00000034         ;EOR R3, R3, #0x04
  132 00000034         ;STR R3, [R2]
  133 00000034 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
  134 00000038 4827            LDR              R0,=Runptr  ; 4) R0=pointer to 
                                                            RunI, old thread
  135 0000003A 6801            LDR              R1,[R0]     ;    R1 = RunI
  136 0000003C         ;LSL     R2,R1,#2  ; R2 = RunI*4
  137 0000003C F8C1 D000       STR              SP, [R1]    ; save current stac
                                                            k pointer
  138 00000040         ;ADD     R1, #4
  139 00000040         ;LDR     R1, [R1]
  140 00000040         ;STR     R1, [R0]
  141 00000040 B50F            PUSH             {R0, R1, R2, LR, R3}
  142 00000042 F7FF FFFE       BL               Scheduler
  143 00000046 E8BD 400F       POP              {R0, R1, R2, LR, R3}
  144 0000004A 6801            LDR              R1, [R0]
  145 0000004C F8D1 D000       LDR              SP, [R1]    ; load dstack point
                                                            er for new thread
  146 00000050         
  147 00000050 E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
  148 00000054         ;EOR R3, R3, #0x04
  149 00000054         ;STR R3, [R2]
  150 00000054 B501            PUSH{R0,         LR}
  151 00000056 F7FF FFFE       BL               EnableInterrupts ; 2) Prevent i
                                                            nterrupt during swi
                                                            tch
  152 0000005A E8BD 4001       POP{R0,          LR}
  153 0000005E         
  154 0000005E         
  155 0000005E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  156 00000060         
  157 00000060         Debug
  158 00000060         ;CPSID I
  159 00000060         ;LDR R0, = st1



ARM Macro Assembler    Page 5 


  160 00000060         ;LDR R1, [R0]
  161 00000060         ;MOV R1, SP
  162 00000060         ;STR R1, [R0]
  163 00000060         ;LDR R0, = Count1
  164 00000060         
  165 00000060         ;LDR R1, [R0]
  166 00000060         ;ADD R1, #1
  167 00000060         ;STR R1, [R0]
  168 00000060         ;CPSIE I
  169 00000060 4770            BX               LR
  170 00000062         
  171 00000062         Debug2
  172 00000062         ;CPSID I
  173 00000062         ;LDR R0, = st1
  174 00000062         ;LDR R1, [R0]
  175 00000062         ;MOV R1, SP
  176 00000062         ;MOV SP, R1
  177 00000062         ;LDR R0, = st2
  178 00000062         ;STR R1, [R0]
  179 00000062         ;LDR R0, = Count2
  180 00000062         
  181 00000062         ;LDR R1, [R0]
  182 00000062         ;ADD R1, #1
  183 00000062         ;STR R1, [R0]
  184 00000062         ;CPSIE I
  185 00000062         ;PUSH{R0, LR}
  186 00000062         ;BL   EnableInterrupts         ; 2) Prevent interrupt du
                       ring switch
  187 00000062         ;POP{R0, LR}
  188 00000062 4770            BX               LR
  189 00000064         
  190 00000064         
  191 00000064         
  192 00000064         
  193 00000064         
  194 00000064         
  195 00000064         ;*******************************************************
                       *************************************************
  196 00000064         ;                                         HANDLE SVC EXC
                       EPTION
  197 00000064         ;                                     void OS_CPU_SVCHan
                       dler(void)
  198 00000064         ;
  199 00000064         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  200 00000064         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  201 00000064         ;           found relative to the return address saved o
                       n the stack on exception entry.
  202 00000064         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  203 00000064         ;*******************************************************
                       *************************************************
  204 00000064         
  205 00000064                 IMPORT           OS_Id
  206 00000064                 IMPORT           OS_Kill
  207 00000064                 IMPORT           OS_Sleep
  208 00000064                 IMPORT           OS_Time
  209 00000064                 IMPORT           OS_AddThread



ARM Macro Assembler    Page 6 


  210 00000064                 IMPORT           OS_TimeDifference
  211 00000064         
  212 00000064         SVC_Handler
  213 00000064         ; put your Lab 5 code here
  214 00000064 B672            CPSID            I
  215 00000066 B500            PUSH             {LR}
  216 00000068 F8DD C01C       LDR              R12,[SP,#28] ; Return address
  217 0000006C F83C CC02       LDRH             R12,[R12,#-2] ; SVC instruction
                                                             is 2 bytes
  218 00000070 F42C 4C7F       BIC              R12,#0xFF00 ; Extract ID in R12
                                                            
  219 00000074 466A            MOV              R2, SP
  220 00000076 F102 0204       ADD              R2, R2, #4
  221 0000007A CA0F            LDM              R2,{R0-R3}  ; Get any parameter
                                                            s
  222 0000007C         
  223 0000007C         ID
  224 0000007C F1BC 0F00       CMP              R12, #0
  225 00000080 D102            BNE              KILL
  226 00000082 F7FF FFFE       BL               OS_Id
  227 00000086 E01D            B                Done
  228 00000088         
  229 00000088         KILL
  230 00000088 F1BC 0F01       CMP              R12, #1
  231 0000008C D102            BNE              SLEEP
  232 0000008E F7FF FFFE       BL               OS_Kill
  233 00000092 E017            B                Done
  234 00000094         
  235 00000094         SLEEP
  236 00000094 F1BC 0F02       CMP              R12, #2
  237 00000098 D102            BNE              TIME
  238 0000009A F7FF FFFE       BL               OS_Sleep
  239 0000009E E011            B                Done
  240 000000A0         
  241 000000A0         TIME
  242 000000A0 F1BC 0F03       CMP              R12, #3
  243 000000A4 D102            BNE              TIME_DIF
  244 000000A6 F7FF FFFE       BL               OS_Time
  245 000000AA E00B            B                Done
  246 000000AC         
  247 000000AC         TIME_DIF
  248 000000AC F1BC 0F04       CMP              R12, #4
  249 000000B0 D102            BNE              THREAD
  250 000000B2 F7FF FFFE       BL               OS_TimeDifference
  251 000000B6 E005            B                Done
  252 000000B8         
  253 000000B8         THREAD
  254 000000B8 F1BC 0F05       CMP              R12, #5
  255 000000BC D103            BNE              Done2
  256 000000BE F7FF FFFE       BL               OS_AddThread
  257 000000C2 E7FF            B                Done
  258 000000C4         
  259 000000C4         
  260 000000C4         Done
  261 000000C4         
  262 000000C4 9001            STR              R0,[SP, #4] ; Store return valu
                                                            e
  263 000000C6         Done2
  264 000000C6         ; LDR R1, = NVIC_SYS_HND_CTRL_R



ARM Macro Assembler    Page 7 


  265 000000C6         ; LDR R1, [R1]
  266 000000C6         ; LDR R2, [R1]
  267 000000C6         ; AND R2, R2, #0xFFFF7FFF
  268 000000C6         ; STR R2, [R1]
  269 000000C6 F85D EB04       POP              {LR}
  270 000000CA B662            CPSIE            I
  271 000000CC 4770            BX               LR          ; Return from excep
                                                            tion
  272 000000CE         
  273 000000CE         set_R9
  274 000000CE 4681            MOV              R9, R0
  275 000000D0 4770            BX               LR
  276 000000D2         
  277 000000D2         
  278 000000D2 00 00           ALIGN
  279 000000D4                 END
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab5 -IC:\Users\prameen\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -IC:\Keil_v5\ARM\CMSIS\
Include --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 529
" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\osasm.l
st ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000004

Symbol: ContextSwitch
   Definitions
      At line 63 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
Debug 00000060

Symbol: Debug
   Definitions
      At line 157 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 20 in file ..\RTOS_Labs_common\osasm.s
Comment: Debug used once
Debug2 00000062

Symbol: Debug2
   Definitions
      At line 171 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 21 in file ..\RTOS_Labs_common\osasm.s
Comment: Debug2 used once
Done 000000C4

Symbol: Done
   Definitions
      At line 260 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 227 in file ..\RTOS_Labs_common\osasm.s
      At line 233 in file ..\RTOS_Labs_common\osasm.s
      At line 239 in file ..\RTOS_Labs_common\osasm.s
      At line 245 in file ..\RTOS_Labs_common\osasm.s
      At line 251 in file ..\RTOS_Labs_common\osasm.s
      At line 257 in file ..\RTOS_Labs_common\osasm.s

Done2 000000C6

Symbol: Done2
   Definitions
      At line 263 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 255 in file ..\RTOS_Labs_common\osasm.s
Comment: Done2 used once
ID 0000007C

Symbol: ID
   Definitions
      At line 223 in file ..\RTOS_Labs_common\osasm.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: ID unused
KILL 00000088

Symbol: KILL
   Definitions
      At line 229 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 225 in file ..\RTOS_Labs_common\osasm.s
Comment: KILL used once
OSStartHang 00000002

Symbol: OSStartHang
   Definitions
      At line 51 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 52 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000001E

Symbol: PendSV_Handler
   Definitions
      At line 119 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SLEEP 00000094

Symbol: SLEEP
   Definitions
      At line 235 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 231 in file ..\RTOS_Labs_common\osasm.s
Comment: SLEEP used once
SVC_Handler 00000064

Symbol: SVC_Handler
   Definitions
      At line 212 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 45 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 15 in file ..\RTOS_Labs_common\osasm.s
      At line 19 in file ..\RTOS_Labs_common\osasm.s

THREAD 000000B8

Symbol: THREAD
   Definitions
      At line 253 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 249 in file ..\RTOS_Labs_common\osasm.s
Comment: THREAD used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

TIME 000000A0

Symbol: TIME
   Definitions
      At line 241 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 237 in file ..\RTOS_Labs_common\osasm.s
Comment: TIME used once
TIME_DIF 000000AC

Symbol: TIME_DIF
   Definitions
      At line 247 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 243 in file ..\RTOS_Labs_common\osasm.s
Comment: TIME_DIF used once
set_R9 000000CE

Symbol: set_R9
   Definitions
      At line 273 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 22 in file ..\RTOS_Labs_common\osasm.s
Comment: set_R9 used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 37 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 65 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 40 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 41 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 42 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 73 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 38 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 39 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
NVIC_SYS_HND_CTRL_R E000ED24

Symbol: NVIC_SYS_HND_CTRL_R
   Definitions
      At line 43 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYS_HND_CTRL_R unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 28 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 123 in file ..\RTOS_Labs_common\osasm.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 77 in file ..\RTOS_Labs_common\osasm.s
      At line 151 in file ..\RTOS_Labs_common\osasm.s

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 32 in file ..\RTOS_Labs_common\osasm.s
      At line 209 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 256 in file ..\RTOS_Labs_common\osasm.s
Warning: OS_AddThread multiply definedComment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 29 in file ..\RTOS_Labs_common\osasm.s
      At line 205 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 226 in file ..\RTOS_Labs_common\osasm.s
Warning: OS_Id multiply definedComment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
      At line 206 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 232 in file ..\RTOS_Labs_common\osasm.s
Warning: OS_Kill multiply definedComment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 33 in file ..\RTOS_Labs_common\osasm.s
      At line 207 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 238 in file ..\RTOS_Labs_common\osasm.s
Warning: OS_Sleep multiply definedComment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 31 in file ..\RTOS_Labs_common\osasm.s
      At line 208 in file ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Uses
      At line 244 in file ..\RTOS_Labs_common\osasm.s
Warning: OS_Time multiply definedComment: OS_Time used once
OS_TimeDifference 00000000

Symbol: OS_TimeDifference
   Definitions
      At line 210 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 250 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_TimeDifference used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: RunPt unused
Runptr 00000000

Symbol: Runptr
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 134 in file ..\RTOS_Labs_common\osasm.s
Comment: Runptr used once
STACK 00000000

Symbol: STACK
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: STACK unused
Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 142 in file ..\RTOS_Labs_common\osasm.s
Comment: Scheduler used once
threads 00000000

Symbol: threads
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: threads unused
13 symbols
373 symbols in table
